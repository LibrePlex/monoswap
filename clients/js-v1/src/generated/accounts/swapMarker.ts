/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type SwapMarker = Account<SwapMarkerAccountData>;

export type SwapMarkerAccountData = {
  namespace: PublicKey;
  escrowedAsset: PublicKey;
  externalAsset: PublicKey;
  escrowedAmount: bigint;
  externalAmount: bigint;
  bump: number;
};

export type SwapMarkerAccountDataArgs = {
  namespace: PublicKey;
  escrowedAsset: PublicKey;
  externalAsset: PublicKey;
  escrowedAmount: number | bigint;
  externalAmount: number | bigint;
  bump: number;
};

export function getSwapMarkerAccountDataSerializer(): Serializer<
  SwapMarkerAccountDataArgs,
  SwapMarkerAccountData
> {
  return struct<SwapMarkerAccountData>(
    [
      ['namespace', publicKeySerializer()],
      ['escrowedAsset', publicKeySerializer()],
      ['externalAsset', publicKeySerializer()],
      ['escrowedAmount', u64()],
      ['externalAmount', u64()],
      ['bump', u8()],
    ],
    { description: 'SwapMarkerAccountData' }
  ) as Serializer<SwapMarkerAccountDataArgs, SwapMarkerAccountData>;
}

export function deserializeSwapMarker(rawAccount: RpcAccount): SwapMarker {
  return deserializeAccount(rawAccount, getSwapMarkerAccountDataSerializer());
}

export async function fetchSwapMarker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SwapMarker> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'SwapMarker');
  return deserializeSwapMarker(maybeAccount);
}

export async function safeFetchSwapMarker(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SwapMarker | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeSwapMarker(maybeAccount) : null;
}

export async function fetchAllSwapMarker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SwapMarker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'SwapMarker');
    return deserializeSwapMarker(maybeAccount);
  });
}

export async function safeFetchAllSwapMarker(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SwapMarker[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeSwapMarker(maybeAccount as RpcAccount));
}

export function getSwapMarkerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'monoswap',
    'MonoRPwMWxcsVEJV27jyEt1f5VoWg3szDBRYUenm221'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      namespace: PublicKey;
      escrowedAsset: PublicKey;
      externalAsset: PublicKey;
      escrowedAmount: number | bigint;
      externalAmount: number | bigint;
      bump: number;
    }>({
      namespace: [0, publicKeySerializer()],
      escrowedAsset: [32, publicKeySerializer()],
      externalAsset: [64, publicKeySerializer()],
      escrowedAmount: [96, u64()],
      externalAmount: [104, u64()],
      bump: [112, u8()],
    })
    .deserializeUsing<SwapMarker>((account) => deserializeSwapMarker(account));
}

export function getSwapMarkerSize(): number {
  return 113;
}
