/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type SwapSeeds = Account<SwapSeedsAccountData>;

export type SwapSeedsAccountData = {
  namespace: PublicKey;
  asset1: PublicKey;
  asset2: PublicKey;
};

export type SwapSeedsAccountDataArgs = SwapSeedsAccountData;

export function getSwapSeedsAccountDataSerializer(): Serializer<
  SwapSeedsAccountDataArgs,
  SwapSeedsAccountData
> {
  return struct<SwapSeedsAccountData>(
    [
      ['namespace', publicKeySerializer()],
      ['asset1', publicKeySerializer()],
      ['asset2', publicKeySerializer()],
    ],
    { description: 'SwapSeedsAccountData' }
  ) as Serializer<SwapSeedsAccountDataArgs, SwapSeedsAccountData>;
}

export function deserializeSwapSeeds(rawAccount: RpcAccount): SwapSeeds {
  return deserializeAccount(rawAccount, getSwapSeedsAccountDataSerializer());
}

export async function fetchSwapSeeds(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SwapSeeds> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'SwapSeeds');
  return deserializeSwapSeeds(maybeAccount);
}

export async function safeFetchSwapSeeds(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SwapSeeds | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeSwapSeeds(maybeAccount) : null;
}

export async function fetchAllSwapSeeds(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SwapSeeds[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'SwapSeeds');
    return deserializeSwapSeeds(maybeAccount);
  });
}

export async function safeFetchAllSwapSeeds(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SwapSeeds[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeSwapSeeds(maybeAccount as RpcAccount));
}

export function getSwapSeedsGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'monoswap',
    'MonojHG3jNB5W9TC8mZm49aJbRXxjsnPzgVWj9j9hu5'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      namespace: PublicKey;
      asset1: PublicKey;
      asset2: PublicKey;
    }>({
      namespace: [0, publicKeySerializer()],
      asset1: [32, publicKeySerializer()],
      asset2: [64, publicKeySerializer()],
    })
    .deserializeUsing<SwapSeeds>((account) => deserializeSwapSeeds(account));
}

export function getSwapSeedsSize(): number {
  return 96;
}
