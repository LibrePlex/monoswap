//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SwapNifty {
    /// Authority to transfer incoming asset
    pub authority: solana_program::pubkey::Pubkey,
    /// Escrows the asset and encodes state about the swap
    pub swap_marker: solana_program::pubkey::Pubkey,
    /// The currently escrowed asset
    pub escrowed_asset: solana_program::pubkey::Pubkey,
    /// External asset being swapped for the escrowed asset
    pub incoming_asset: solana_program::pubkey::Pubkey,
    /// Group account for the escrowed asset, if applicable
    pub escrowed_asset_group: Option<solana_program::pubkey::Pubkey>,
    /// Group account for the incoming asset, if applicable
    pub incoming_asset_group: Option<solana_program::pubkey::Pubkey>,
    /// Nifty asset program account
    pub nifty_asset_program: solana_program::pubkey::Pubkey,
}

impl SwapNifty {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_marker,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrowed_asset,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.incoming_asset,
            false,
        ));
        if let Some(escrowed_asset_group) = self.escrowed_asset_group {
            accounts.push(solana_program::instruction::AccountMeta::new(
                escrowed_asset_group,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MONOSWAP_ID,
                false,
            ));
        }
        if let Some(incoming_asset_group) = self.incoming_asset_group {
            accounts.push(solana_program::instruction::AccountMeta::new(
                incoming_asset_group,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MONOSWAP_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.nifty_asset_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = SwapNiftyInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::MONOSWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct SwapNiftyInstructionData {
    discriminator: u8,
}

impl SwapNiftyInstructionData {
    fn new() -> Self {
        Self { discriminator: 3 }
    }
}

/// Instruction builder for `SwapNifty`.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` swap_marker
///   2. `[writable]` escrowed_asset
///   3. `[writable]` incoming_asset
///   4. `[writable, optional]` escrowed_asset_group
///   5. `[writable, optional]` incoming_asset_group
///   6. `[]` nifty_asset_program
#[derive(Default)]
pub struct SwapNiftyBuilder {
    authority: Option<solana_program::pubkey::Pubkey>,
    swap_marker: Option<solana_program::pubkey::Pubkey>,
    escrowed_asset: Option<solana_program::pubkey::Pubkey>,
    incoming_asset: Option<solana_program::pubkey::Pubkey>,
    escrowed_asset_group: Option<solana_program::pubkey::Pubkey>,
    incoming_asset_group: Option<solana_program::pubkey::Pubkey>,
    nifty_asset_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapNiftyBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Authority to transfer incoming asset
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Escrows the asset and encodes state about the swap
    #[inline(always)]
    pub fn swap_marker(&mut self, swap_marker: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_marker = Some(swap_marker);
        self
    }
    /// The currently escrowed asset
    #[inline(always)]
    pub fn escrowed_asset(&mut self, escrowed_asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrowed_asset = Some(escrowed_asset);
        self
    }
    /// External asset being swapped for the escrowed asset
    #[inline(always)]
    pub fn incoming_asset(&mut self, incoming_asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.incoming_asset = Some(incoming_asset);
        self
    }
    /// `[optional account]`
    /// Group account for the escrowed asset, if applicable
    #[inline(always)]
    pub fn escrowed_asset_group(
        &mut self,
        escrowed_asset_group: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.escrowed_asset_group = escrowed_asset_group;
        self
    }
    /// `[optional account]`
    /// Group account for the incoming asset, if applicable
    #[inline(always)]
    pub fn incoming_asset_group(
        &mut self,
        incoming_asset_group: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.incoming_asset_group = incoming_asset_group;
        self
    }
    /// Nifty asset program account
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SwapNifty {
            authority: self.authority.expect("authority is not set"),
            swap_marker: self.swap_marker.expect("swap_marker is not set"),
            escrowed_asset: self.escrowed_asset.expect("escrowed_asset is not set"),
            incoming_asset: self.incoming_asset.expect("incoming_asset is not set"),
            escrowed_asset_group: self.escrowed_asset_group,
            incoming_asset_group: self.incoming_asset_group,
            nifty_asset_program: self
                .nifty_asset_program
                .expect("nifty_asset_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `swap_nifty` CPI accounts.
pub struct SwapNiftyCpiAccounts<'a, 'b> {
    /// Authority to transfer incoming asset
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Escrows the asset and encodes state about the swap
    pub swap_marker: &'b solana_program::account_info::AccountInfo<'a>,
    /// The currently escrowed asset
    pub escrowed_asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// External asset being swapped for the escrowed asset
    pub incoming_asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// Group account for the escrowed asset, if applicable
    pub escrowed_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Group account for the incoming asset, if applicable
    pub incoming_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Nifty asset program account
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `swap_nifty` CPI instruction.
pub struct SwapNiftyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Authority to transfer incoming asset
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Escrows the asset and encodes state about the swap
    pub swap_marker: &'b solana_program::account_info::AccountInfo<'a>,
    /// The currently escrowed asset
    pub escrowed_asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// External asset being swapped for the escrowed asset
    pub incoming_asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// Group account for the escrowed asset, if applicable
    pub escrowed_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Group account for the incoming asset, if applicable
    pub incoming_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Nifty asset program account
    pub nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SwapNiftyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SwapNiftyCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            authority: accounts.authority,
            swap_marker: accounts.swap_marker,
            escrowed_asset: accounts.escrowed_asset,
            incoming_asset: accounts.incoming_asset,
            escrowed_asset_group: accounts.escrowed_asset_group,
            incoming_asset_group: accounts.incoming_asset_group,
            nifty_asset_program: accounts.nifty_asset_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_marker.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrowed_asset.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.incoming_asset.key,
            false,
        ));
        if let Some(escrowed_asset_group) = self.escrowed_asset_group {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *escrowed_asset_group.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MONOSWAP_ID,
                false,
            ));
        }
        if let Some(incoming_asset_group) = self.incoming_asset_group {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *incoming_asset_group.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::MONOSWAP_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.nifty_asset_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = SwapNiftyInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MONOSWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.swap_marker.clone());
        account_infos.push(self.escrowed_asset.clone());
        account_infos.push(self.incoming_asset.clone());
        if let Some(escrowed_asset_group) = self.escrowed_asset_group {
            account_infos.push(escrowed_asset_group.clone());
        }
        if let Some(incoming_asset_group) = self.incoming_asset_group {
            account_infos.push(incoming_asset_group.clone());
        }
        account_infos.push(self.nifty_asset_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SwapNifty` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` authority
///   1. `[writable]` swap_marker
///   2. `[writable]` escrowed_asset
///   3. `[writable]` incoming_asset
///   4. `[writable, optional]` escrowed_asset_group
///   5. `[writable, optional]` incoming_asset_group
///   6. `[]` nifty_asset_program
pub struct SwapNiftyCpiBuilder<'a, 'b> {
    instruction: Box<SwapNiftyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapNiftyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapNiftyCpiBuilderInstruction {
            __program: program,
            authority: None,
            swap_marker: None,
            escrowed_asset: None,
            incoming_asset: None,
            escrowed_asset_group: None,
            incoming_asset_group: None,
            nifty_asset_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Authority to transfer incoming asset
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Escrows the asset and encodes state about the swap
    #[inline(always)]
    pub fn swap_marker(
        &mut self,
        swap_marker: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_marker = Some(swap_marker);
        self
    }
    /// The currently escrowed asset
    #[inline(always)]
    pub fn escrowed_asset(
        &mut self,
        escrowed_asset: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrowed_asset = Some(escrowed_asset);
        self
    }
    /// External asset being swapped for the escrowed asset
    #[inline(always)]
    pub fn incoming_asset(
        &mut self,
        incoming_asset: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.incoming_asset = Some(incoming_asset);
        self
    }
    /// `[optional account]`
    /// Group account for the escrowed asset, if applicable
    #[inline(always)]
    pub fn escrowed_asset_group(
        &mut self,
        escrowed_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.escrowed_asset_group = escrowed_asset_group;
        self
    }
    /// `[optional account]`
    /// Group account for the incoming asset, if applicable
    #[inline(always)]
    pub fn incoming_asset_group(
        &mut self,
        incoming_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.incoming_asset_group = incoming_asset_group;
        self
    }
    /// Nifty asset program account
    #[inline(always)]
    pub fn nifty_asset_program(
        &mut self,
        nifty_asset_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nifty_asset_program = Some(nifty_asset_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SwapNiftyCpi {
            __program: self.instruction.__program,

            authority: self.instruction.authority.expect("authority is not set"),

            swap_marker: self
                .instruction
                .swap_marker
                .expect("swap_marker is not set"),

            escrowed_asset: self
                .instruction
                .escrowed_asset
                .expect("escrowed_asset is not set"),

            incoming_asset: self
                .instruction
                .incoming_asset
                .expect("incoming_asset is not set"),

            escrowed_asset_group: self.instruction.escrowed_asset_group,

            incoming_asset_group: self.instruction.incoming_asset_group,

            nifty_asset_program: self
                .instruction
                .nifty_asset_program
                .expect("nifty_asset_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SwapNiftyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_marker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrowed_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    incoming_asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrowed_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    incoming_asset_group: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    nifty_asset_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
