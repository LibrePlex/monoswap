/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs';

export type SwapSeeds<TAddress extends string = string> = Account<
  SwapSeedsAccountData,
  TAddress
>;

export type MaybeSwapSeeds<TAddress extends string = string> = MaybeAccount<
  SwapSeedsAccountData,
  TAddress
>;

export type SwapSeedsAccountData = {
  namespace: Address;
  asset1: Address;
  asset2: Address;
};

export type SwapSeedsAccountDataArgs = SwapSeedsAccountData;

export function getSwapSeedsAccountDataEncoder(): Encoder<SwapSeedsAccountDataArgs> {
  return getStructEncoder([
    ['namespace', getAddressEncoder()],
    ['asset1', getAddressEncoder()],
    ['asset2', getAddressEncoder()],
  ]);
}

export function getSwapSeedsAccountDataDecoder(): Decoder<SwapSeedsAccountData> {
  return getStructDecoder([
    ['namespace', getAddressDecoder()],
    ['asset1', getAddressDecoder()],
    ['asset2', getAddressDecoder()],
  ]);
}

export function getSwapSeedsAccountDataCodec(): Codec<
  SwapSeedsAccountDataArgs,
  SwapSeedsAccountData
> {
  return combineCodec(
    getSwapSeedsAccountDataEncoder(),
    getSwapSeedsAccountDataDecoder()
  );
}

export function decodeSwapSeeds<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): SwapSeeds<TAddress>;
export function decodeSwapSeeds<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeSwapSeeds<TAddress>;
export function decodeSwapSeeds<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): SwapSeeds<TAddress> | MaybeSwapSeeds<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSwapSeedsAccountDataDecoder()
  );
}

export async function fetchSwapSeeds<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<SwapSeeds<TAddress>> {
  const maybeAccount = await fetchMaybeSwapSeeds(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSwapSeeds<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeSwapSeeds<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSwapSeeds(maybeAccount);
}

export async function fetchAllSwapSeeds(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<SwapSeeds[]> {
  const maybeAccounts = await fetchAllMaybeSwapSeeds(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSwapSeeds(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeSwapSeeds[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSwapSeeds(maybeAccount));
}

export function getSwapSeedsSize(): number {
  return 96;
}
