/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';

export type SwapMarker<TAddress extends string = string> = Account<
  SwapMarkerAccountData,
  TAddress
>;

export type MaybeSwapMarker<TAddress extends string = string> = MaybeAccount<
  SwapMarkerAccountData,
  TAddress
>;

export type SwapMarkerAccountData = {
  namespace: Address;
  escrowedAsset: Address;
  externalAsset: Address;
  escrowedAmount: bigint;
  externalAmount: bigint;
  bump: number;
};

export type SwapMarkerAccountDataArgs = {
  namespace: Address;
  escrowedAsset: Address;
  externalAsset: Address;
  escrowedAmount: number | bigint;
  externalAmount: number | bigint;
  bump: number;
};

export function getSwapMarkerAccountDataEncoder(): Encoder<SwapMarkerAccountDataArgs> {
  return getStructEncoder([
    ['namespace', getAddressEncoder()],
    ['escrowedAsset', getAddressEncoder()],
    ['externalAsset', getAddressEncoder()],
    ['escrowedAmount', getU64Encoder()],
    ['externalAmount', getU64Encoder()],
    ['bump', getU8Encoder()],
  ]);
}

export function getSwapMarkerAccountDataDecoder(): Decoder<SwapMarkerAccountData> {
  return getStructDecoder([
    ['namespace', getAddressDecoder()],
    ['escrowedAsset', getAddressDecoder()],
    ['externalAsset', getAddressDecoder()],
    ['escrowedAmount', getU64Decoder()],
    ['externalAmount', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getSwapMarkerAccountDataCodec(): Codec<
  SwapMarkerAccountDataArgs,
  SwapMarkerAccountData
> {
  return combineCodec(
    getSwapMarkerAccountDataEncoder(),
    getSwapMarkerAccountDataDecoder()
  );
}

export function decodeSwapMarker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): SwapMarker<TAddress>;
export function decodeSwapMarker<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeSwapMarker<TAddress>;
export function decodeSwapMarker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): SwapMarker<TAddress> | MaybeSwapMarker<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSwapMarkerAccountDataDecoder()
  );
}

export async function fetchSwapMarker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<SwapMarker<TAddress>> {
  const maybeAccount = await fetchMaybeSwapMarker(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSwapMarker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeSwapMarker<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSwapMarker(maybeAccount);
}

export async function fetchAllSwapMarker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<SwapMarker[]> {
  const maybeAccounts = await fetchAllMaybeSwapMarker(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSwapMarker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeSwapMarker[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSwapMarker(maybeAccount));
}

export function getSwapMarkerSize(): number {
  return 113;
}
