/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { MONOSWAP_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type SwapInstruction<
  TProgram extends string = typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSwapMarker extends string | IAccountMeta<string> = string,
  TAccountEscrowedAsset extends string | IAccountMeta<string> = string,
  TAccountIncomingAsset extends string | IAccountMeta<string> = string,
  TAccountSwapMarkerAuxIncoming extends string | IAccountMeta<string> = string,
  TAccountSwapMarkerAuxOutgoing extends string | IAccountMeta<string> = string,
  TAccountEscrowedAssetAux extends string | IAccountMeta<string> = string,
  TAccountIncomingAssetAux extends string | IAccountMeta<string> = string,
  TAccountEscrowedAssetProgram extends string | IAccountMeta<string> = string,
  TAccountIncomingAssetProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSwapMarker extends string
        ? WritableAccount<TAccountSwapMarker>
        : TAccountSwapMarker,
      TAccountEscrowedAsset extends string
        ? WritableAccount<TAccountEscrowedAsset>
        : TAccountEscrowedAsset,
      TAccountIncomingAsset extends string
        ? WritableAccount<TAccountIncomingAsset>
        : TAccountIncomingAsset,
      TAccountSwapMarkerAuxIncoming extends string
        ? WritableAccount<TAccountSwapMarkerAuxIncoming>
        : TAccountSwapMarkerAuxIncoming,
      TAccountSwapMarkerAuxOutgoing extends string
        ? WritableAccount<TAccountSwapMarkerAuxOutgoing>
        : TAccountSwapMarkerAuxOutgoing,
      TAccountEscrowedAssetAux extends string
        ? WritableAccount<TAccountEscrowedAssetAux>
        : TAccountEscrowedAssetAux,
      TAccountIncomingAssetAux extends string
        ? WritableAccount<TAccountIncomingAssetAux>
        : TAccountIncomingAssetAux,
      TAccountEscrowedAssetProgram extends string
        ? ReadonlyAccount<TAccountEscrowedAssetProgram>
        : TAccountEscrowedAssetProgram,
      TAccountIncomingAssetProgram extends string
        ? ReadonlyAccount<TAccountIncomingAssetProgram>
        : TAccountIncomingAssetProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = { discriminator: number };

export type SwapInstructionDataArgs = {};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSwapMarker extends string = string,
  TAccountEscrowedAsset extends string = string,
  TAccountIncomingAsset extends string = string,
  TAccountSwapMarkerAuxIncoming extends string = string,
  TAccountSwapMarkerAuxOutgoing extends string = string,
  TAccountEscrowedAssetAux extends string = string,
  TAccountIncomingAssetAux extends string = string,
  TAccountEscrowedAssetProgram extends string = string,
  TAccountIncomingAssetProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Account to pay for any accounts that need to be created */
  payer: TransactionSigner<TAccountPayer>;
  /** Authority to transfer incoming asset */
  authority: TransactionSigner<TAccountAuthority>;
  /** Escrows the asset and encodes state about the swap */
  swapMarker: Address<TAccountSwapMarker>;
  /** The asset to be escrowed for the swap */
  escrowedAsset: Address<TAccountEscrowedAsset>;
  /** External asset connected to the incoming asset */
  incomingAsset: Address<TAccountIncomingAsset>;
  /** Auxiliary account for the swap marker: e.g. ATA */
  swapMarkerAuxIncoming?: Address<TAccountSwapMarkerAuxIncoming>;
  /** Auxiliary account for the swap marker: e.g. ATA */
  swapMarkerAuxOutgoing?: Address<TAccountSwapMarkerAuxOutgoing>;
  /** Associated account for the incoming asset, e.g. token account */
  escrowedAssetAux?: Address<TAccountEscrowedAssetAux>;
  /** Associated account for the external asset, e.g. token account */
  incomingAssetAux?: Address<TAccountIncomingAssetAux>;
  /** Transfer Program ID of the incoming asset */
  escrowedAssetProgram: Address<TAccountEscrowedAssetProgram>;
  /** Transfer Program ID of the external asset */
  incomingAssetProgram: Address<TAccountIncomingAssetProgram>;
  /** The SPL associated token program account program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  /** System program account */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getSwapInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSwapMarker extends string,
  TAccountEscrowedAsset extends string,
  TAccountIncomingAsset extends string,
  TAccountSwapMarkerAuxIncoming extends string,
  TAccountSwapMarkerAuxOutgoing extends string,
  TAccountEscrowedAssetAux extends string,
  TAccountIncomingAssetAux extends string,
  TAccountEscrowedAssetProgram extends string,
  TAccountIncomingAssetProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
>(
  input: SwapInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountSwapMarker,
    TAccountEscrowedAsset,
    TAccountIncomingAsset,
    TAccountSwapMarkerAuxIncoming,
    TAccountSwapMarkerAuxOutgoing,
    TAccountEscrowedAssetAux,
    TAccountIncomingAssetAux,
    TAccountEscrowedAssetProgram,
    TAccountIncomingAssetProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
): SwapInstruction<
  typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountAuthority,
  TAccountSwapMarker,
  TAccountEscrowedAsset,
  TAccountIncomingAsset,
  TAccountSwapMarkerAuxIncoming,
  TAccountSwapMarkerAuxOutgoing,
  TAccountEscrowedAssetAux,
  TAccountIncomingAssetAux,
  TAccountEscrowedAssetProgram,
  TAccountIncomingAssetProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = MONOSWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    swapMarker: { value: input.swapMarker ?? null, isWritable: true },
    escrowedAsset: { value: input.escrowedAsset ?? null, isWritable: true },
    incomingAsset: { value: input.incomingAsset ?? null, isWritable: true },
    swapMarkerAuxIncoming: {
      value: input.swapMarkerAuxIncoming ?? null,
      isWritable: true,
    },
    swapMarkerAuxOutgoing: {
      value: input.swapMarkerAuxOutgoing ?? null,
      isWritable: true,
    },
    escrowedAssetAux: {
      value: input.escrowedAssetAux ?? null,
      isWritable: true,
    },
    incomingAssetAux: {
      value: input.incomingAssetAux ?? null,
      isWritable: true,
    },
    escrowedAssetProgram: {
      value: input.escrowedAssetProgram ?? null,
      isWritable: false,
    },
    incomingAssetProgram: {
      value: input.incomingAssetProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.swapMarker),
      getAccountMeta(accounts.escrowedAsset),
      getAccountMeta(accounts.incomingAsset),
      getAccountMeta(accounts.swapMarkerAuxIncoming),
      getAccountMeta(accounts.swapMarkerAuxOutgoing),
      getAccountMeta(accounts.escrowedAssetAux),
      getAccountMeta(accounts.incomingAssetAux),
      getAccountMeta(accounts.escrowedAssetProgram),
      getAccountMeta(accounts.incomingAssetProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode({}),
  } as SwapInstruction<
    typeof MONOSWAP_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountAuthority,
    TAccountSwapMarker,
    TAccountEscrowedAsset,
    TAccountIncomingAsset,
    TAccountSwapMarkerAuxIncoming,
    TAccountSwapMarkerAuxOutgoing,
    TAccountEscrowedAssetAux,
    TAccountIncomingAssetAux,
    TAccountEscrowedAssetProgram,
    TAccountIncomingAssetProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Account to pay for any accounts that need to be created */
    payer: TAccountMetas[0];
    /** Authority to transfer incoming asset */
    authority: TAccountMetas[1];
    /** Escrows the asset and encodes state about the swap */
    swapMarker: TAccountMetas[2];
    /** The asset to be escrowed for the swap */
    escrowedAsset: TAccountMetas[3];
    /** External asset connected to the incoming asset */
    incomingAsset: TAccountMetas[4];
    /** Auxiliary account for the swap marker: e.g. ATA */
    swapMarkerAuxIncoming?: TAccountMetas[5] | undefined;
    /** Auxiliary account for the swap marker: e.g. ATA */
    swapMarkerAuxOutgoing?: TAccountMetas[6] | undefined;
    /** Associated account for the incoming asset, e.g. token account */
    escrowedAssetAux?: TAccountMetas[7] | undefined;
    /** Associated account for the external asset, e.g. token account */
    incomingAssetAux?: TAccountMetas[8] | undefined;
    /** Transfer Program ID of the incoming asset */
    escrowedAssetProgram: TAccountMetas[9];
    /** Transfer Program ID of the external asset */
    incomingAssetProgram: TAccountMetas[10];
    /** The SPL associated token program account program */
    associatedTokenProgram?: TAccountMetas[11] | undefined;
    /** System program account */
    systemProgram: TAccountMetas[12];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MONOSWAP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      swapMarker: getNextAccount(),
      escrowedAsset: getNextAccount(),
      incomingAsset: getNextAccount(),
      swapMarkerAuxIncoming: getNextOptionalAccount(),
      swapMarkerAuxOutgoing: getNextOptionalAccount(),
      escrowedAssetAux: getNextOptionalAccount(),
      incomingAssetAux: getNextOptionalAccount(),
      escrowedAssetProgram: getNextAccount(),
      incomingAssetProgram: getNextAccount(),
      associatedTokenProgram: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
