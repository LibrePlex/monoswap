/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { MONOSWAP_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type SwapInstruction<
  TProgram extends string = typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSwapMarker extends string | IAccountMeta<string> = string,
  TAccountEscrowedAsset extends string | IAccountMeta<string> = string,
  TAccountIncomingAsset extends string | IAccountMeta<string> = string,
  TAccountSwapMarkerAux extends string | IAccountMeta<string> = string,
  TAccountEscrowedAssetAux extends string | IAccountMeta<string> = string,
  TAccountIncomingAssetAux extends string | IAccountMeta<string> = string,
  TAccountEscrowedAssetProgram extends string | IAccountMeta<string> = string,
  TAccountIncomingAssetProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSwapMarker extends string
        ? WritableAccount<TAccountSwapMarker>
        : TAccountSwapMarker,
      TAccountEscrowedAsset extends string
        ? WritableAccount<TAccountEscrowedAsset>
        : TAccountEscrowedAsset,
      TAccountIncomingAsset extends string
        ? ReadonlyAccount<TAccountIncomingAsset>
        : TAccountIncomingAsset,
      TAccountSwapMarkerAux extends string
        ? WritableAccount<TAccountSwapMarkerAux>
        : TAccountSwapMarkerAux,
      TAccountEscrowedAssetAux extends string
        ? ReadonlyAccount<TAccountEscrowedAssetAux>
        : TAccountEscrowedAssetAux,
      TAccountIncomingAssetAux extends string
        ? ReadonlyAccount<TAccountIncomingAssetAux>
        : TAccountIncomingAssetAux,
      TAccountEscrowedAssetProgram extends string
        ? ReadonlyAccount<TAccountEscrowedAssetProgram>
        : TAccountEscrowedAssetProgram,
      TAccountIncomingAssetProgram extends string
        ? ReadonlyAccount<TAccountIncomingAssetProgram>
        : TAccountIncomingAssetProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = { discriminator: number };

export type SwapInstructionDataArgs = {};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapInput<
  TAccountAuthority extends string = string,
  TAccountSwapMarker extends string = string,
  TAccountEscrowedAsset extends string = string,
  TAccountIncomingAsset extends string = string,
  TAccountSwapMarkerAux extends string = string,
  TAccountEscrowedAssetAux extends string = string,
  TAccountIncomingAssetAux extends string = string,
  TAccountEscrowedAssetProgram extends string = string,
  TAccountIncomingAssetProgram extends string = string,
> = {
  /** Authority to transfer incoming asset */
  authority: TransactionSigner<TAccountAuthority>;
  /** Escrows the asset and encodes state about the swap */
  swapMarker: Address<TAccountSwapMarker>;
  /** The asset to be escrowed for the swap */
  escrowedAsset: Address<TAccountEscrowedAsset>;
  /** External asset connected to the incoming asset */
  incomingAsset: Address<TAccountIncomingAsset>;
  /** Auxiliary account for the swap marker: e.g. ATA */
  swapMarkerAux: Address<TAccountSwapMarkerAux>;
  /** Associated account for the incoming asset, e.g. token account */
  escrowedAssetAux?: Address<TAccountEscrowedAssetAux>;
  /** Associated account for the external asset, e.g. token account */
  incomingAssetAux?: Address<TAccountIncomingAssetAux>;
  /** Transfer Program ID of the incoming asset */
  escrowedAssetProgram: Address<TAccountEscrowedAssetProgram>;
  /** Transfer Program ID of the external asset */
  incomingAssetProgram: Address<TAccountIncomingAssetProgram>;
};

export function getSwapInstruction<
  TAccountAuthority extends string,
  TAccountSwapMarker extends string,
  TAccountEscrowedAsset extends string,
  TAccountIncomingAsset extends string,
  TAccountSwapMarkerAux extends string,
  TAccountEscrowedAssetAux extends string,
  TAccountIncomingAssetAux extends string,
  TAccountEscrowedAssetProgram extends string,
  TAccountIncomingAssetProgram extends string,
>(
  input: SwapInput<
    TAccountAuthority,
    TAccountSwapMarker,
    TAccountEscrowedAsset,
    TAccountIncomingAsset,
    TAccountSwapMarkerAux,
    TAccountEscrowedAssetAux,
    TAccountIncomingAssetAux,
    TAccountEscrowedAssetProgram,
    TAccountIncomingAssetProgram
  >
): SwapInstruction<
  typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountAuthority,
  TAccountSwapMarker,
  TAccountEscrowedAsset,
  TAccountIncomingAsset,
  TAccountSwapMarkerAux,
  TAccountEscrowedAssetAux,
  TAccountIncomingAssetAux,
  TAccountEscrowedAssetProgram,
  TAccountIncomingAssetProgram
> {
  // Program address.
  const programAddress = MONOSWAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    swapMarker: { value: input.swapMarker ?? null, isWritable: true },
    escrowedAsset: { value: input.escrowedAsset ?? null, isWritable: true },
    incomingAsset: { value: input.incomingAsset ?? null, isWritable: false },
    swapMarkerAux: { value: input.swapMarkerAux ?? null, isWritable: true },
    escrowedAssetAux: {
      value: input.escrowedAssetAux ?? null,
      isWritable: false,
    },
    incomingAssetAux: {
      value: input.incomingAssetAux ?? null,
      isWritable: false,
    },
    escrowedAssetProgram: {
      value: input.escrowedAssetProgram ?? null,
      isWritable: false,
    },
    incomingAssetProgram: {
      value: input.incomingAssetProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.swapMarker),
      getAccountMeta(accounts.escrowedAsset),
      getAccountMeta(accounts.incomingAsset),
      getAccountMeta(accounts.swapMarkerAux),
      getAccountMeta(accounts.escrowedAssetAux),
      getAccountMeta(accounts.incomingAssetAux),
      getAccountMeta(accounts.escrowedAssetProgram),
      getAccountMeta(accounts.incomingAssetProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode({}),
  } as SwapInstruction<
    typeof MONOSWAP_PROGRAM_ADDRESS,
    TAccountAuthority,
    TAccountSwapMarker,
    TAccountEscrowedAsset,
    TAccountIncomingAsset,
    TAccountSwapMarkerAux,
    TAccountEscrowedAssetAux,
    TAccountIncomingAssetAux,
    TAccountEscrowedAssetProgram,
    TAccountIncomingAssetProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof MONOSWAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Authority to transfer incoming asset */
    authority: TAccountMetas[0];
    /** Escrows the asset and encodes state about the swap */
    swapMarker: TAccountMetas[1];
    /** The asset to be escrowed for the swap */
    escrowedAsset: TAccountMetas[2];
    /** External asset connected to the incoming asset */
    incomingAsset: TAccountMetas[3];
    /** Auxiliary account for the swap marker: e.g. ATA */
    swapMarkerAux: TAccountMetas[4];
    /** Associated account for the incoming asset, e.g. token account */
    escrowedAssetAux?: TAccountMetas[5] | undefined;
    /** Associated account for the external asset, e.g. token account */
    incomingAssetAux?: TAccountMetas[6] | undefined;
    /** Transfer Program ID of the incoming asset */
    escrowedAssetProgram: TAccountMetas[7];
    /** Transfer Program ID of the external asset */
    incomingAssetProgram: TAccountMetas[8];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MONOSWAP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      swapMarker: getNextAccount(),
      escrowedAsset: getNextAccount(),
      incomingAsset: getNextAccount(),
      swapMarkerAux: getNextAccount(),
      escrowedAssetAux: getNextOptionalAccount(),
      incomingAssetAux: getNextOptionalAccount(),
      escrowedAssetProgram: getNextAccount(),
      incomingAssetProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
