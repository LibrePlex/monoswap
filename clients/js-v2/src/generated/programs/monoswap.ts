/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  MonoswapProgramError,
  MonoswapProgramErrorCode,
  getMonoswapProgramErrorFromCode,
} from '../errors';
import {
  ParsedCreateSwapInstruction,
  ParsedSwapNiftyInstruction,
  ParsedSwapNiftySPLInstruction,
  ParsedSwapSPLInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const MONOSWAP_PROGRAM_ADDRESS =
  'MonojHG3jNB5W9TC8mZm49aJbRXxjsnPzgVWj9j9hu5' as Address<'MonojHG3jNB5W9TC8mZm49aJbRXxjsnPzgVWj9j9hu5'>;

export type MonoswapProgram =
  Program<'MonojHG3jNB5W9TC8mZm49aJbRXxjsnPzgVWj9j9hu5'> &
    ProgramWithErrors<MonoswapProgramErrorCode, MonoswapProgramError>;

export function getMonoswapProgram(): MonoswapProgram {
  return {
    name: 'monoswap',
    address: MONOSWAP_PROGRAM_ADDRESS,
    getErrorFromCode(code: MonoswapProgramErrorCode, cause?: Error) {
      return getMonoswapProgramErrorFromCode(code, cause);
    },
  };
}

export enum MonoswapAccount {
  SwapMarker,
  SwapSeeds,
}

export enum MonoswapInstruction {
  CreateSwap,
  SwapSPL,
  SwapNifty,
  SwapNiftySPL,
}

export function identifyMonoswapInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): MonoswapInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return MonoswapInstruction.CreateSwap;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return MonoswapInstruction.SwapSPL;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return MonoswapInstruction.SwapNifty;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return MonoswapInstruction.SwapNiftySPL;
  }
  throw new Error(
    'The provided instruction could not be identified as a monoswap instruction.'
  );
}

export type ParsedMonoswapInstruction<
  TProgram extends string = 'MonojHG3jNB5W9TC8mZm49aJbRXxjsnPzgVWj9j9hu5',
> =
  | ({
      instructionType: MonoswapInstruction.CreateSwap;
    } & ParsedCreateSwapInstruction<TProgram>)
  | ({
      instructionType: MonoswapInstruction.SwapSPL;
    } & ParsedSwapSPLInstruction<TProgram>)
  | ({
      instructionType: MonoswapInstruction.SwapNifty;
    } & ParsedSwapNiftyInstruction<TProgram>)
  | ({
      instructionType: MonoswapInstruction.SwapNiftySPL;
    } & ParsedSwapNiftySPLInstruction<TProgram>);
