/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum MonoswapProgramErrorCode {
  /** DeserializationError: Error deserializing an account */
  DESERIALIZATION_ERROR = 0x0, // 0
  /** SerializationError: Error serializing an account */
  SERIALIZATION_ERROR = 0x1, // 1
  /** InvalidProgramOwner: Invalid program owner. This likely mean the provided account does not exist */
  INVALID_PROGRAM_OWNER = 0x2, // 2
  /** InvalidPda: Invalid PDA derivation */
  INVALID_PDA = 0x3, // 3
  /** ExpectedEmptyAccount: Expected empty account */
  EXPECTED_EMPTY_ACCOUNT = 0x4, // 4
  /** ExpectedNonEmptyAccount: Expected non empty account */
  EXPECTED_NON_EMPTY_ACCOUNT = 0x5, // 5
  /** ExpectedSignerAccount: Expected signer account */
  EXPECTED_SIGNER_ACCOUNT = 0x6, // 6
  /** ExpectedWritableAccount: Expected writable account */
  EXPECTED_WRITABLE_ACCOUNT = 0x7, // 7
  /** AccountMismatch: Account mismatch */
  ACCOUNT_MISMATCH = 0x8, // 8
  /** InvalidAccountKey: Invalid account key */
  INVALID_ACCOUNT_KEY = 0x9, // 9
  /** NumericalOverflow: Numerical overflow */
  NUMERICAL_OVERFLOW = 0xa, // 10
  /** InvalidSystemProgram: Invalid system program account */
  INVALID_SYSTEM_PROGRAM = 0xb, // 11
  /** IninitalizedMint: IninitalizedMint */
  ININITALIZED_MINT = 0xc, // 12
  /** MissingNiftyGroup: Missing Nifty Group account */
  MISSING_NIFTY_GROUP = 0xd, // 13
  /** MissingIncomingAssetAux: Missing incoming asset aux */
  MISSING_INCOMING_ASSET_AUX = 0xe, // 14
  /** MissingEscrowedAssetAux: Missing escrowed asset aux */
  MISSING_ESCROWED_ASSET_AUX = 0xf, // 15
  /** MissingSwapMarkerAux: Missing swap marker aux */
  MISSING_SWAP_MARKER_AUX = 0x10, // 16
  /** UnsupportedAssetType: Unsupported asset type */
  UNSUPPORTED_ASSET_TYPE = 0x11, // 17
  /** InvalidTokenProgram: Invalid Token Program */
  INVALID_TOKEN_PROGRAM = 0x12, // 18
}

export class MonoswapProgramError extends Error {
  override readonly name = 'MonoswapProgramError';

  readonly code: MonoswapProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: MonoswapProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let monoswapProgramErrorCodeMap:
  | Record<MonoswapProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  monoswapProgramErrorCodeMap = {
    [MonoswapProgramErrorCode.DESERIALIZATION_ERROR]: [
      'DeserializationError',
      `Error deserializing an account`,
    ],
    [MonoswapProgramErrorCode.SERIALIZATION_ERROR]: [
      'SerializationError',
      `Error serializing an account`,
    ],
    [MonoswapProgramErrorCode.INVALID_PROGRAM_OWNER]: [
      'InvalidProgramOwner',
      `Invalid program owner. This likely mean the provided account does not exist`,
    ],
    [MonoswapProgramErrorCode.INVALID_PDA]: [
      'InvalidPda',
      `Invalid PDA derivation`,
    ],
    [MonoswapProgramErrorCode.EXPECTED_EMPTY_ACCOUNT]: [
      'ExpectedEmptyAccount',
      `Expected empty account`,
    ],
    [MonoswapProgramErrorCode.EXPECTED_NON_EMPTY_ACCOUNT]: [
      'ExpectedNonEmptyAccount',
      `Expected non empty account`,
    ],
    [MonoswapProgramErrorCode.EXPECTED_SIGNER_ACCOUNT]: [
      'ExpectedSignerAccount',
      `Expected signer account`,
    ],
    [MonoswapProgramErrorCode.EXPECTED_WRITABLE_ACCOUNT]: [
      'ExpectedWritableAccount',
      `Expected writable account`,
    ],
    [MonoswapProgramErrorCode.ACCOUNT_MISMATCH]: [
      'AccountMismatch',
      `Account mismatch`,
    ],
    [MonoswapProgramErrorCode.INVALID_ACCOUNT_KEY]: [
      'InvalidAccountKey',
      `Invalid account key`,
    ],
    [MonoswapProgramErrorCode.NUMERICAL_OVERFLOW]: [
      'NumericalOverflow',
      `Numerical overflow`,
    ],
    [MonoswapProgramErrorCode.INVALID_SYSTEM_PROGRAM]: [
      'InvalidSystemProgram',
      `Invalid system program account`,
    ],
    [MonoswapProgramErrorCode.ININITALIZED_MINT]: [
      'IninitalizedMint',
      `IninitalizedMint`,
    ],
    [MonoswapProgramErrorCode.MISSING_NIFTY_GROUP]: [
      'MissingNiftyGroup',
      `Missing Nifty Group account`,
    ],
    [MonoswapProgramErrorCode.MISSING_INCOMING_ASSET_AUX]: [
      'MissingIncomingAssetAux',
      `Missing incoming asset aux`,
    ],
    [MonoswapProgramErrorCode.MISSING_ESCROWED_ASSET_AUX]: [
      'MissingEscrowedAssetAux',
      `Missing escrowed asset aux`,
    ],
    [MonoswapProgramErrorCode.MISSING_SWAP_MARKER_AUX]: [
      'MissingSwapMarkerAux',
      `Missing swap marker aux`,
    ],
    [MonoswapProgramErrorCode.UNSUPPORTED_ASSET_TYPE]: [
      'UnsupportedAssetType',
      `Unsupported asset type`,
    ],
    [MonoswapProgramErrorCode.INVALID_TOKEN_PROGRAM]: [
      'InvalidTokenProgram',
      `Invalid Token Program`,
    ],
  };
}

export function getMonoswapProgramErrorFromCode(
  code: MonoswapProgramErrorCode,
  cause?: Error
): MonoswapProgramError {
  if (__DEV__) {
    return new MonoswapProgramError(
      code,
      ...(
        monoswapProgramErrorCodeMap as Record<
          MonoswapProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new MonoswapProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
